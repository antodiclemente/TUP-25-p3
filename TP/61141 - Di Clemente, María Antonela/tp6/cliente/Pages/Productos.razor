@using cliente.Services
@using cliente.Models
@page "/productos/lista"
@inject ApiService ApiService
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.WebUtilities

<h3 class="text-white mb-4">Productos disponibles</h3>

<div class="container mt-5">

@if (mostrarMensaje)
{
    <div class="alert alert-success">
        ¡Compra realizada con éxito!
    </div>
}

@if (cargando)
{
    <p><em>Cargando productos...</em></p>
}
else if (productos != null && productos.Any())
{
    <div class="mb-3">
        <button class="btn btn-success" @onclick="@(() => Navigation.NavigateTo("/productos/nuevo"))">Agregar producto</button>
    </div>

    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var producto in productos)
        {
            <div class="col">
                <div class="card p-3 text-center bg-dark border-light">
                    <img src="@producto.ImagenUrl" class="img-fluid mb-3 rounded" style="max-height: 200px; object-fit: cover;" />
                    <h5 class="text-light">@producto.Nombre</h5>
                    <p class="text-muted">@producto.Precio.ToString("C")</p>
                    <button class="btn btn-success w-100 mb-2" @onclick="() => AgregarAlCarrito(producto)">Agregar al carrito</button>
                    <div class="d-flex justify-content-center">
                        <button class="btn btn-sm btn-warning me-2">Editar</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => EliminarProducto(producto.Id)">Eliminar</button>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>No hay productos disponibles.</p>
}

</div>

@code {
    private List<Producto> productos;
    private bool cargando = true;
    private bool mostrarMensaje = false;

    protected override void OnInitialized()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("compraExitosa", out var valor))
        {
            mostrarMensaje = valor == "true";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarProductos();
    }

    private async Task CargarProductos()
    {
        cargando = true;
        productos = await ApiService.ObtenerProductosAsync();
        cargando = false;
    }

    private async Task EliminarProducto(int id)
    {
        var exito = await ApiService.EliminarProductoAsync(id);
        if (exito)
        {
            await CargarProductos();
        }
    }

    private void AgregarAlCarrito(Producto producto)
    {
        // Lógica de carrito
    }
}


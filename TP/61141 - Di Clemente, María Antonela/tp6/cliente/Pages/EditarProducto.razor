@page "/productos/editar/{id:int}"
@using cliente.Services
@using cliente.Models
@inject ApiService ApiService
@inject NavigationManager Navigation

<h3>Editar Producto</h3>

@if (cargando)
{
    <p>Cargando producto...</p>
}
else if (producto == null)
{
    <div class="alert alert-danger">Producto no encontrado.</div>
}
else
{
     // Formulario con validaciones para editar el producto
    <EditForm Model="producto" OnValidSubmit="ActualizarProducto">
        <DataAnnotationsValidator />
        <ValidationSummary />

    
        <!-- Campos del formulario -->
        <div class="mb-3">
            <label for="nombre" class="form-label">Nombre</label>
            <InputText id="nombre" class="form-control" @bind-Value="producto.Nombre" />
            <ValidationMessage For="@(() => producto.Nombre)" />
        </div>

        <div class="mb-3">
            <label for="descripcion" class="form-label">Descripción</label>
            <InputTextArea id="descripcion" class="form-control" @bind-Value="producto.Descripcion" />
            <ValidationMessage For="@(() => producto.Descripcion)" />
        </div>

        <div class="mb-3">
            <label for="precio" class="form-label">Precio</label>
            <InputNumber id="precio" class="form-control" @bind-Value="producto.Precio" />
            <ValidationMessage For="@(() => producto.Precio)" />
        </div>

        <div class="mb-3">
            <label for="stock" class="form-label">Stock</label>
            <InputNumber id="stock" class="form-control" @bind-Value="producto.Stock" />
            <ValidationMessage For="@(() => producto.Stock)" />
        </div>

        <div class="mb-3">
            <label for="imagenUrl" class="form-label">URL de Imagen</label>
            <InputText id="imagenUrl" class="form-control" @bind-Value="producto.ImagenUrl" />
            <ValidationMessage For="@(() => producto.ImagenUrl)" />
        </div>

        <div class="mb-3">
            <label for="categoria" class="form-label">Categoría</label>
            <InputText id="categoria" class="form-control" @bind-Value="producto.Categoria" />
            <ValidationMessage For="@(() => producto.Categoria)" />
        </div>

        <button type="submit" class="btn btn-primary">Actualizar</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="Cancelar">Cancelar</button>
    </EditForm>

    @if (error != null)
    {
        <div class="alert alert-danger mt-3">@error</div>
    }
}

@code {
    [Parameter]
    public int id { get; set; }      // id recibido desde la URL

    Producto producto;
    string error;
    bool cargando = true;

    protected override async Task OnInitializedAsync()       // Al iniciar, busca el producto por id
    {
        try
        {
            producto = await ApiService.ObtenerProductoPorIdAsync(id);
        }
        catch
        {
            error = "Error al cargar el producto.";
        }
        finally
        {
            cargando = false;
        }
    }

   // Llama al API para actualizar el producto
    async Task ActualizarProducto()
    {
        error = null;
        bool exito = await ApiService.ActualizarProductoAsync(producto);

        if (exito)
        {
            Navigation.NavigateTo("/productos");
        }
        else
        {
            error = "Error al actualizar el producto.";
        }
    }

    void Cancelar()
    {
        Navigation.NavigateTo("/productos");
    }
}

@using cliente.Services
@using cliente.Models
@page "/productos"
@inject ApiService ApiService
@inject NavigationManager Navigation
@inject CarritoService CarritoService
@inject IJSRuntime JS


<h3>Listado de Productos</h3>

<button class="btn btn-success" @onclick="IrANuevoProducto">Agregar producto</button>
<button class="btn btn-outline-primary ms-2" @onclick="IrAlCarrito">Ver carrito</button>


@if (productos == null)
{
    <p>Cargando productos...</p>
}
else if (!productos.Any())
{
    <p>No hay productos para mostrar.</p>
}
else
{
    <div class="row">
        @foreach (var p in productos)
        {
            <div class="col-md-4 mb-4">
                <div class="card h-100">
                    <img src="@p.ImagenUrl" class="card-img-top" alt="@p.Nombre" />
                    <div class="card-body">
                        <h5 class="card-title">@p.Nombre</h5>
                        <p class="card-text">@p.Descripcion</p>
                        <p><strong>Precio:</strong> @p.Precio.ToString("C")</p>
                        <p><strong>Stock:</strong> @p.Stock</p>
                        <button class="btn btn-primary"
                                @onclick="() => AgregarAlCarrito(p)"
                                disabled="@(p.Stock <= 0)">
                            Agregar al carrito
                        </button>

                           <button class="btn btn-warning ms-2" @onclick="() => EditarProducto(p.Id)">
                            Editar
                        </button>

                        <button class="btn btn-danger ms-2" @onclick="() => EliminarProducto(p.Id)">
                        Eliminar
                        </button>

                    </div>
                </div>
            </div>
        }
    </div>
}


@code {
    List<Producto> productos;

    protected override async Task OnInitializedAsync()
    {
        productos = await ApiService.ObtenerProductosAsync();
    }

    void IrANuevoProducto()
    {
        Navigation.NavigateTo("/productos/nuevo");
    }

    void AgregarAlCarrito(Producto producto)
    {
        if (producto.Stock > 0)
        {
            CarritoService.AgregarProducto(producto);
        }
    }
     void EditarProducto(int id)
    {
        Navigation.NavigateTo($"/productos/editar/{id}");
    }

    async Task EliminarProducto(int id)
    {
    var confirmado = await JS.InvokeAsync<bool>("confirm", $"¿Estás seguro que quiere eliminar el producto con ID {id}?");
    if (confirmado)
         {
        bool exito = await ApiService.EliminarProductoAsync(id);
        if (exito)
        {
            productos = await ApiService.ObtenerProductosAsync();
        }
        else
        {
            Console.WriteLine("Error al eliminar el producto");
        }
        }
    }
          void IrAlCarrito()
        {
        Navigation.NavigateTo("/carrito");
        }

}

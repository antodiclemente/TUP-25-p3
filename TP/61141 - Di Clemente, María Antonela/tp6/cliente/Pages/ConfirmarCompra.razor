@page "/confirmar-compra"
@using cliente.Services
@using cliente.Models
@inject CarritoService CarritoService
@inject NavigationManager Navigation
@using System.ComponentModel.DataAnnotations


<h3>Confirmación de compra</h3>

@if (!CarritoService.Items.Any())
{
    <div class="alert alert-info">
        Tu carrito está vacío. <button class="btn btn-link" @onclick="VolverAlCatalogo">Volver al catálogo</button>
    </div>
}
else
{
    <div>
        <p><strong>Total de ítems:</strong> @CantidadTotal</p>
        <p><strong>Importe total:</strong> @Total.ToString("C")</p>
    </div>

    <EditForm Model="cliente" OnValidSubmit="ProcesarCompra">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="nombre" class="form-label">Nombre</label>
            <InputText id="nombre" class="form-control" @bind-Value="cliente.Nombre" />
            <ValidationMessage For="@(() => cliente.Nombre)" />
        </div>

        <div class="mb-3">
            <label for="apellido" class="form-label">Apellido</label>
            <InputText id="apellido" class="form-control" @bind-Value="cliente.Apellido" />
            <ValidationMessage For="@(() => cliente.Apellido)" />
        </div>

        <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <InputText id="email" class="form-control" @bind-Value="cliente.Email" />
            <ValidationMessage For="@(() => cliente.Email)" />
        </div>

        <button type="submit" class="btn btn-success">Confirmar compra</button>
    </EditForm>

    @if (mensajeError != null)
    {
        <div class="alert alert-danger mt-3">@mensajeError</div>
    }
}

@code {
    ClienteCompra cliente = new ClienteCompra();

    string mensajeError;

    int CantidadTotal => CarritoService.CantidadTotal();

    decimal Total => CarritoService.Total();

    void VolverAlCatalogo()
    {
        Navigation.NavigateTo("/productos");
    }

    void LimpiarCarrito()
    {
        CarritoService.Vaciar();
    }

    async Task ProcesarCompra()
    {
        mensajeError = null;

        try
        {
            LimpiarCarrito();
            Navigation.NavigateTo("/productos/lista?compraExitosa=true");

        }
        catch (Exception ex)
        {
            mensajeError = "Error al procesar la compra. Intente nuevamente.";
        }
    }

    public class ClienteCompra
    {
        [Required(ErrorMessage = "El nombre es obligatorio")]
        public string Nombre { get; set; }

        [Required(ErrorMessage = "El apellido es obligatorio")]
        public string Apellido { get; set; }

        [Required(ErrorMessage = "El email es obligatorio")]
        [EmailAddress(ErrorMessage = "Email no válido")]
        public string Email { get; set; }
    }
}
